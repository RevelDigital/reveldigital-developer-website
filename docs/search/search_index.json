{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Revel Digital is a cloud based platform for digital signage and media distribution. As a platform, we provide a number of extensibility options allowing our customers to integrate with 3rd party services, create customized content, and programatically access account data.</p>"},{"location":"#rest-api","title":"REST API","text":"<p>Programmatic access to your Revel Digital account information including media, devices, playlists, reports, etc.</p>"},{"location":"#gadgets","title":"Gadgets","text":"<p>Create dynamic template components such as the weather or a calendar. Gadgets can be used directly in a playlist, or embedded in a more complicated template layout.</p>"},{"location":"#webapps","title":"Webapps","text":"<p>Webapps are self-contained web applications embeddable within a template layout. Webapps are generally used when a more complex UX is desired with the ability to utilize existing web frameworks such as Angular, React, or Vue.</p>"},{"location":"#player-api-for-windows","title":"Player API for Windows","text":"<p>Runtime scripting of your Windows based digital signage.</p>"},{"location":"#player-api-for-android","title":"Player API for Android","text":"<p>Runtime scripting of your Android based digital signage.</p>"},{"location":"android/","title":"Revel Digital Player API for Android","text":""},{"location":"android/#introduction","title":"Introduction","text":"<p>The Revel Digital Player API provides runtime access to the Revel Digital player software. This capability allows complete freedom to manipulate the signage, while it's playing, to achieve any level of functionality required.</p> <p>The player software is built on the Android Platform and utilizes a Javascript scripting engine for interpretation of user supplied code. Scripts are able to leverage the complete Android Framework.</p> <p>At the heart of the API is the <code>Controller</code>. The Controller has a reference to the currently active <code>Schedule</code> and <code>Template</code>. Each <code>Template</code> has a list of its Modules which together compose the template content. Each template <code>Module</code> has a reference to the actual control responsible for rendering its content. The control is accessed through the <code>RevelControl</code> interface and has a number of RevelDigital specific methods and properties. The RevelControl interface can also be treated as a reference to an Android View for performing any Android specific operations. Similarily the <code>Template</code> interface can be treated as a reference to an Android ViewGroup.</p>"},{"location":"android/#example-script","title":"Example script","text":"<p>The following example will fade out an image when a hot spot is clicked. The template looks like this:</p> <p></p> <p>The image is named <code>Static Image 1</code> and the hot spot is named <code>Hot Spot 1</code>. These names are assigned at template design time and are always accessible from script directly by name. Spaces and other special characters in the name are always substituted with an underscore in script.</p> <p>To edit the script for this template, click to open the Menu in the template designer, then click RevelScript Editor. Then enter the following script:</p> <pre><code>Hot_Spot_1.setOnClickListener(new View.OnClickListener() {\n    onClick(View v) {\n      Static_Image_1.animate().alpha(0);\n    }\n});\n</code></pre> <p>In this example an event handler was added for the Click event. This in turn called alpha method of the Android animation framework to perform the fade.</p>"},{"location":"android/#snippets","title":"Snippets","text":"<p>The script editor has a number of built-in snippets available for some of the more common scripting tasks. Only zones currently added to the template will be available in the snippet dropdown.</p> <p></p> <p>These snippets will auto generate the script necessary to perform the function selected.</p> <p>Note</p> <p>Make sure your platform is properly selected at the top/right of the script editor window.</p>"},{"location":"android/#technical-reference","title":"Technical Reference","text":"<p>Please refer to our technical API website for more details on actual controls, events, and methods available.</p> <p>https://reveldigital.github.io/RevelDigital.Player.Android.Doc/</p>"},{"location":"gadgets/","title":"Revel Digital Gadgets","text":""},{"location":"gadgets/#introduction","title":"Introduction","text":"<p>Gadgets are a simple means of providing customizable, dynamic content to any template. The Revel Digital platform includes a number of ready-to-use gadgets for everything from weather conditions to social media feeds. Creating your own gadget is simple if you have some basic understanding of HTML and Javascript.</p> <p></p>"},{"location":"gadgets/#whats-in-a-gadget","title":"What's in a gadget","text":"<p>A gadget is nothing more than an XML file which defines the properties of the gadget along with the HTML and Javascript for rendering the gadget content.</p> <p>Here's a template for a sample gadget:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; \n&lt;Module&gt; \n&lt;ModulePrefs title=\"Sample Gadget\" description=\"\" author=\"\" background=\"transparent\"&gt;\n  &lt;UserPref name=\"myStringPref\" display_name=\"Example string preference\" datatype=\"string\" default_value=\"Hello World!\" required=\"true\" /&gt;\n  &lt;UserPref name=\"myEnumPref\" display_name=\"Example enum preferences\" datatype=\"enum\" default_value=\"first\"&gt;\n    &lt;EnumValue value=\"first\" display_value=\"First\" /&gt;\n    &lt;EnumValue value=\"second\" display_value=\"Second\" /&gt;\n  &lt;/UserPref&gt;\n  &lt;UserPref name=\"myStylePref\" display_name=\"Example style preferences\" datatype=\"style\" default_value=\"font-family:Verdana;color:rgb(255, 255, 255);font-size:24px;text-align:left;\" required=\"true\" /&gt;\n  &lt;UserPref name=\"myBooleanPref\" display_name=\"Example boolean preference\" datatype=\"bool\" default_value=\"true\" /&gt;\n  &lt;UserPref name=\"myColorPref\" display_name=\"color\" datatype=\"color\" default_value=\"#ff00ff\" /&gt;\n\n  &lt;!-- The following preferences should not be modified --&gt;\n  &lt;UserPref name=\"ForeColor\" datatype=\"hidden\" /&gt;\n  &lt;UserPref name=\"BackColor\" datatype=\"hidden\" /&gt;\n  &lt;UserPref name=\"rdW\" display_name=\"Width\" required=\"true\" default_value=\"280\" datatype=\"hidden\" /&gt;\n  &lt;UserPref name=\"rdH\" display_name=\"Height\" required=\"true\" default_value=\"190\" datatype=\"hidden\" /&gt;\n  &lt;UserPref name=\"rdKey\" display_name=\"Device Registration Key\" default_value=\"*|DEVICE.REGISTRATIONKEY|*\" datatype=\"hidden\" /&gt;\n&lt;/ModulePrefs&gt;\n&lt;Content type=\"html\"&gt;\n&lt;![CDATA[\n\n&lt;style type=\"text/css\"&gt;\n  body *\n  {\n    line-height: 1.2em; \n    letter-spacing: 0; \n    word-spacing: normal;\n  }\n\n  body\n  {\n    background: transparent;\n    width: __UP_rdW__px;\n    height: __UP_rdH__px;\n    overflow: hidden;\n  }\n  .my-style\n  {\n    __UP_myStylePref__;\n  }\n&lt;/style&gt;\n\n&lt;!-- Preferences can be inlined in your HTML like so --&gt;\n&lt;div class=\"my-style\" id=\"container\"&gt;__UP_myStringPref__&lt;/div&gt; \n\n&lt;script type=\"text/javascript\"&gt;\n\n  var prefs = new gadgets.Prefs();\n\n  // This function is called after the gadget has been initialized.\n  function onLoad() {\n\n    &lt;!-- Preferences can be accessed at runtime like so --&gt;\n    alert(prefs.getString('myStringPref'));\n  }\n\n  gadgets.util.registerOnLoadHandler(onLoad);\n\n&lt;/script&gt;\n\n]]&gt;\n&lt;/Content&gt;\n&lt;/Module&gt;\n</code></pre>"},{"location":"gadgets/#module-prefs","title":"Module prefs","text":"<p>You'll see in the sample gadget a section for module preferences called <code>&lt;ModulePrefs&gt;</code>. It's here that you'll define any customizable properties for your gadget. A preference is defined with a <code>&lt;UserPref&gt;</code> element and can have any of the following data types:</p> <ul> <li><code>string</code> for simple string properties</li> <li><code>enum</code> for defining a list of selectable options</li> <li><code>bool</code> for a checkbox type property</li> <li><code>style</code> for defining a number of CSS type styles</li> <li><code>hidden</code> for providing properties to the gadget which are not visible to the template designer</li> </ul> <p>These preferences are then available in the gadget content either by direct substitution:</p> <pre><code>&lt;!-- This will substitute the myStringPref property --&gt;\n&lt;div class=\"my-style\" id=\"container\"&gt;__UP_myStringPref__&lt;/div&gt;\n</code></pre> <p>or by utilizing the gadget Javascript API method to retrieve a property value:</p> <pre><code>/* Preferences can be accessed at runtime like so */\nalert(prefs.getString('myStringPref'));\n</code></pre>"},{"location":"gadgets/#module-content","title":"Module content","text":"<p>The <code>&lt;Content&gt;</code> section of the gadget is where your HTML/Javascript is contained. This is the visible portion of the gadget and can contain most any valid HTML markup. It's recommended to include the following script for initializing the gadget:</p> <pre><code>&lt;script type=\"text/javascript\"&gt;\n\n  var prefs = new gadgets.Prefs();\n\n  // This function is called after the gadget has been initialized.\n  function onLoad() {\n  }\n\n  gadgets.util.registerOnLoadHandler(onLoad);\n\n&lt;/script&gt;\n</code></pre> <p>This ensures the properties will be accessible via the <code>prefs</code> object.</p>"},{"location":"gadgets/#publishing-your-gadget","title":"Publishing your gadget","text":"<p>Once you have your gadget XML ready to go, you'll need to make it available to the Revel Digital template editor. Most any web hosting provider will do, but we recommend Github for it's simplicity.</p> <p>You can read more on Github Pages here. This is a great option for simple hosting.</p>"},{"location":"gadgets/#adding-your-gadget-to-a-template","title":"Adding your gadget to a template","text":"<p>Now that your gadget is available on the web we can add it to your template.</p> <p></p> <p>Add a new Gadget zone to your template, in the gadget properties click the 'Select Gadget' button and paste the URL to your gadget XML in the Source field. Tap Enter to submit the new Gadget URL. The custom gadget properties will populate and you will be able to now preview your gadget within the template.</p> <p>Now you can preview the template to see your work!</p>"},{"location":"gadgets/#yeoman-generator","title":"Yeoman generator","text":"<p>Our Yeoman generator can scaffold a gadget template for you automatically.</p> <p>First, install Yeoman and generator-reveldigital-gadget using npm (we assume you have pre-installed node.js).</p> <pre><code>npm install -g yo\nnpm install -g generator-reveldigital-gadget\n</code></pre> <p>Then generate your new gadget:</p> <pre><code>yo reveldigital-gadget\n</code></pre>"},{"location":"gadgets/#angular-based-gadgets","title":"Angular Based Gadgets","text":"<p>Angular is a popular framework for developing web based applications. By developing your gadget in Angular you are provided a wide range custom components, development tools, internationalization tools, accessibility tools, and more.</p> <p>Revel Digital provides a custom Angular schematic for quickly scaffolding your Angular app for use as a gadget. The schematic incorporates the Revel Digital client library for interfacing with player devices. The schematic also provides a simplified method for publishing and hosting your gadget to GitHub Pages.</p>"},{"location":"gadgets/#quickstart","title":"Quickstart","text":"<p>New to Angular? Check out the Angular documentation for getting your environment configured for development.</p>"},{"location":"gadgets/#step-1-github-repository-creation-optional","title":"Step 1. GitHub Repository Creation (Optional)","text":"<p>Not hosting your app on Github? Skip to step #2.</p> <p>Create a new repository on GitHub.com. For more information, see \"Creating a new repository\".</p> <p>Copy your remote repository URL</p> <p></p> <pre><code>git remote add origin &lt;REMOTE_URL&gt;\n# Sets the new remote\ngit remote -v\n# Verifies the new remote URL\n</code></pre>"},{"location":"gadgets/#step-2-create-a-new-angular-app","title":"Step 2. Create a new Angular app","text":"<p>From within your working folder, run the following Angular CLI command using the name of your app.</p> <pre><code>ng new my-app --directory ./\n# Generates the boilerplate code for a new Angular app\n</code></pre> Note <p>Need to use a specific version of Angular for your project?</p> <p>Try using NPX:</p> <p>npm install -g npx npx -p @angular/cli@13 ng new my-app</p>"},{"location":"gadgets/#step-3-add-the-revel-digital-libaries","title":"Step 3. Add the Revel Digital libaries","text":"<p>Run the Revel Digital angular schematic which will configure your app for use as a Revel Digital gadget.</p> <pre><code>ng add @reveldigital/player-client@latest\n# Run the Revel Digital Angular schematic\n</code></pre>"},{"location":"gadgets/#step-4-build","title":"Step 4. Build","text":"<p>The build script will generate the Angular app along with a the gadget XML definition file.</p> <pre><code>npm run build:gadget\n# Run the gadget build script\n</code></pre>"},{"location":"gadgets/#step-5-deploy","title":"Step 5. Deploy","text":"<p>The app can be hosted using any number of hosting services, however the provided schematic includes a simplified option for publishing to GitHub Pages.</p> <p>Assuming your working folder is associated with your GitHub repository, simply run the following command to deploy the app to the <code>gh-pages</code> branch. The gadget app and associated XML file will be publicly visibile and available for use in your signage.</p> <pre><code>npm run deploy:gadget\n# Deploy to GitHub Pages\n</code></pre>"},{"location":"gadgets/#sample-usage","title":"Sample usage","text":"<p>The majority of the functionality is contained within the PlayerClientService. The service and supporting library exposes the following functionality:</p> <ul> <li>Methods for obtaining player details such as device time, locale, etc</li> <li>Methods for interfacting with the player including sending commands and calling into player scripting</li> <li>Player lifecycle methods (ready/start/stop)</li> <li>Gadget property accessors such as user preferences</li> <li>Miscellaneous helpers such as the SafeStyle pipe</li> </ul> <p>Simply inject this service in your Angular component constructor in order to access the player client interface.</p> <pre><code>  constructor(public client: PlayerClientService) {\n\n    this.prefs = client.getPrefs();\n\n    this.style = this.prefs.getString('myStylePref');\n\n    this.client.onReady$.subscribe((val) =&gt; {\n      console.log(val ? 'Ready' : 'Not ready');\n    });\n\n    this.client.onCommand$.subscribe((cmd) =&gt; {\n      console.log(`onCommand: ${cmd.name}, ${cmd.arg}`);\n    });\n\n    this.client.onStart$.subscribe(() =&gt; {\n      console.log(\"onStart\");\n    });\n\n    this.client.onStop$.subscribe(() =&gt; {\n      console.log(\"onStop\");\n    });\n  }\n</code></pre>"},{"location":"gadgets/#gadget-definition-preferences","title":"Gadget Definition &amp; Preferences","text":"<p>The <code>assets/gadget.yaml</code> file is the definition file for your gadget, responsible for defining the basic properties and features of the gadget as presented to the user. These properties include the gadget name, description, support URL, and preferences. A sample <code>gadgets.yaml</code> file is included in your project after running the schematic.</p> <p>Preferences are the primary method for providing customization options of your gadget. They allow signage designers to change and preview gadget properties at design time within the Revel Digital CMS.</p> <p>The following is the sample <code>gadgets.yaml</code> included with the schematic:</p> <pre><code># Basic properties of the gadget must include the following:\n#   title: Title of the gadget as it will appear in the Revel Digital CMS UX\n#   title_url: Optional support URL for the gadget\n#   description: Details of the gadget. Will appear within the Revel Digital CMS\n#   author: Name of author or organization credited with developing the gadget\n#   background: (Deprecated) should always be transparent for most gadgets\n#\ntitle: My Gadget\ntitle_url: https://mysupporturl.org\ndescription: Describe the purpose of your gadget here\nauthor: My Organization\nbackground: transparent\n\n# Requirements enable certain features of the gadget. Available options include:\n#   reveldigital (core Revel Digital features)\n#   offline (Enable service worker caching for offline support)\n#   webfont (Enable Google WebFonts for dynamic font loading)\n#   moment (Enable the moment library for localized date/time, initialized with device timezone)\n#   jquery (Enable the jQuery libary)\n#\nrequirements:\n  - reveldigital\n  - offline\n  - webfont\n  - moment\n  - jquery\n\n# Locales are use for localization within the gadget definition (XML) itself.\n#  Docs for using the Gadget API for i18n are available here: https://developers.google.com/gadgets/docs/i18n\n#\n# Angular applications should use the i18n support provided by the Angular framework:\n#  https://angular.io/guide/i18n-overview\n#\nlocales:\n  - messages: https://reveldigital.github.io/reveldigital-gadgets/ALL_ALL.xml\n\n  - lang: fr\n    messages: https://reveldigital.github.io/reveldigital-gadgets/ALL_ALL.xml\n\n# Preferences provide customization options for the gadget and are accessible at both design time and runtime.\n#\n# Propreties of a preference include:\n#   name: Unique name or ID for the preference\n#   display_name: Name as shown in the UX\n#   datatype: string, enum, hidden, bool, style, list\n#   default_value: Default value\n#   required: Make this prefence mandatory, must have a value\n#   depends: The visibility of this preference depends on other preferences. This requires the name\n#     of the dependent preference along with a list of values. Condition types can include\n#     any_of, all_of, none_of. Nested depends conditions are also possible.\n#\nprefs:\n  - name: myStringPref\n    display_name: Sample string preference\n    datatype: string\n    default_value: test string\n    required: true\n\n  - name: myBoolPref\n    display_name: Sample boolean preference\n    datatype: bool\n    default_value: true\n    required: true\n    depends:\n      - name: myEnumPref\n        any_of:\n          - values:\n            - fast\n\n  - name: myStylePref\n    display_name: Sample style preference\n    datatype: style\n    default_value: font-family:Verdana;color:rgb(255, 255, 255);font-size:18px;\n    required: true\n\n  - name: myEnumPref\n    display_name: Sample enum preference\n    datatype: enum\n    default_value: fast\n    required: true\n    multiple: false\n    options:\n      - value: fastest\n        display_value: Fastest\n      - value: fast\n        display_value: Fast\n      - value: medium\n        display_value: Medium\n\n  - name: myListPref\n    display_name: Sample list preference\n    datatype: list\n    default_value: dog|cat\n    required: false\n</code></pre> <p>This definition file results in the following user experience when designing your gadget in a template:</p> <p></p> <p>You will see the preferences exposed in the editor which can then be modified at design time.</p> <p>Individual preferences are able to be accessed in your gadget code like so:</p> <pre><code>this.prefs = client.getPrefs();\n\nthis.prefs.getString('myStringPref');\nthis.prefs.getBool('myBoolPref');\nthis.prefs.getFloat('myFloatPref');\nthis.prefs.getInt('myIntPref');\nthis.prefs.getArray('myListPref');\n</code></pre>"},{"location":"gadgets/#angular-library-documentation","title":"Angular Library Documentation","text":"<p>Library documentation is available here: https://reveldigital.github.io/reveldigital-client-library/</p> <p>A sample Angular app is available in this repo under https://github.com/RevelDigital/reveldigital-client-library/tree/master/projects/test-app.</p>"},{"location":"rest-api/","title":"RevelDigital REST API","text":"<p>Provides REST based access to your RevelDigital account.</p> <p>Note</p> <p>See our Swagger or Postman websites for interactive documentation.</p>"},{"location":"rest-api/#getting-started","title":"Getting Started","text":""},{"location":"rest-api/#api-endpoint","title":"API Endpoint","text":"<p>All API access originates from <code>https://api.reveldigital.com</code></p>"},{"location":"rest-api/#authentication","title":"Authentication","text":"<p>Note</p> <p>A valid API key is required for each request. API keys are available in your Revel Digital account under Account &gt; Developer API.</p> <p>There are three methods of authentication available including:</p> <ul> <li>Query Parameter</li> </ul> <p>The <code>api_key</code> can be included in a query string parameter and shoud be included in each request.</p> <pre><code>$curl -i https://api.reveldigital.com/account?api_key=&lt;your key here&gt;\n</code></pre> <ul> <li>Header (More Secure)</li> </ul> <p>To use header based authentication, include the <code>X-RevelDigital-API: &lt;your key here&gt;</code> header value.</p> <ul> <li>OAuth 2.0 (Most secure)</li> </ul> <p>OAuth is a standard protocol for the exchange of an authorization token. This method requires a user login rather than an API key.</p> <p>Note</p> <p>Users must be assigned to the <code>API</code> role in order to access the API programatically.</p> <p>Use the following for configuration of your OAuth client:</p> <pre><code>Client ID: RevelDigital\nRequried scope: webapi\nWell known endpoint: https://id.reveldigital.com/.well-known/openid-configuration\n</code></pre>"},{"location":"rest-api/#data-format","title":"Data Format","text":"<p>All data with the exception of media uploads is in <code>JSON</code> format. This includes POST body data. Request headers should include the following to specify JSON as the content type.</p> <pre><code>Content-Type: application/json\n</code></pre> <p>Timestamps are returned in ISO 8601 format:</p> <pre><code>YYYY-MM-DDTHH:MM:SSZ\n</code></pre>"},{"location":"rest-api/#cross-origin-resource-sharing","title":"Cross Origin Resource Sharing","text":"<p>The API supports Cross Origin Resource Sharing (CORS) for AJAX requests. You can read the CORS W3C working draft, or this intro from the HTML5 Security Guide.</p>"},{"location":"rest-api/#swagger","title":"Swagger","text":"<p>Interactive API documentation provided by Swagger</p> <p>Note</p> <p>The Revel Digital API is also available on Postman here: https://www.postman.com/reveldigital</p>"},{"location":"webapps/","title":"Revel Digital Webapps","text":""},{"location":"webapps/#introduction","title":"Introduction","text":"<p>Webapps are self-contained web applications which are able to be embedded within your digital signage content. While there is some cross-over between Gadgets and Webapps, Webapps are generally preferred in situations where a more complicated UX is desired, or when using existing development platforms and workflows.</p> <p></p>"},{"location":"webapps/#whats-a-webapp","title":"What's a Webapp?","text":"<p>A Webapp is simply a web application, or website, archived in ZIP format, and uploaded to the Revel Digital CMS as any other asset. Webapps have the following features:</p> <ul> <li>Developers are able to utilize any modern web framework including Angular, React, and Vue</li> <li>Webapps are able to be utilized in offline situtions where devices may have limited or no connectivity</li> <li>Able to interface with the underlying player application for performing native actions or to determine player specific details (location, tags, etc)</li> <li>GitHub Actions available for simplifying the development pipeline or integrating with existing Enterprise workflows</li> </ul>"},{"location":"webapps/#the-webapp-player-interface","title":"The Webapp / Player Interface","text":"<p>Webapps (and Gadgets), are able to interface with the underlying player application for performing tasks such as event tracking, sending commands, executing script, or to simply discover player specific details such as device name, location, tags, etc.</p> <p>Revel Digital provides a Javascript library to simplify this interface and is compatible with most any modern Javascript runtime. Library documentation is available here: https://reveldigital.github.io/reveldigital-client-sdk/</p>"},{"location":"webapps/#deployment-options","title":"Deployment Options","text":"<p>In many cases the development team working on the digital signage UX will be completly independent of the team responsible for the digital signage network and deployment of assets. As such, Revel Digital provides a number of options for deployment of your Webapp in order to streamline the process, reduce potential for mistakes, and to maintain this separation of concerns.</p>"},{"location":"webapps/#github-actions","title":"GitHub Actions","text":"<p>A GitHub Action is used in automated CI/CD workflows for performing the build, packaging, and deployment of your Webapp. This, of course, assumes you are using GitHub as your code repository. The Revel Digital Webapp Action performs the packaging and uploading of your Webapp to your Revel Digital account. Tags are automatically applied to all newly uploaded Webapp assets including tags for version, environment, and any other custom tags you would like to apply.</p> <p>Here's an example worflow utilizing our GitHub action for deployment of an Angular based app: <pre><code>name: Deploy Webapp\non: push\n\njobs:\n  release-webapp:\n    runs-on: ${{ matrix.os }}\n\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n\n    steps:\n      - name: Check out Git repository\n        uses: actions/checkout@v1\n\n      - name: Install Node.js, NPM and Yarn\n        uses: actions/setup-node@v1\n        with:\n          node-version: 22\n\n      - name: install angular\n        run: npm install -g @angular/cli@17\n\n      - name: npm dependencies\n        run: npm install\n\n      - name: Build webapp\n        run: ng build\n\n      - name: Deploy webapp to Revel CMS\n        uses: RevelDigital/webapp-action@v1.0.11\n        with:\n          api-key: ${{ secrets.Revel_API_Key }}\n          environment: ${{ github.head_ref || github.ref_name }}\n</code></pre></p>"},{"location":"webapps/#manual-deployment","title":"Manual Deployment","text":"<p>If automation is not your thing, it's always possible to manually upload your Webapp asset direct to your Revel Digital account.</p> <ul> <li>Build your app using your framework build tools (eg: npm)</li> <li>Locate the build output folder (eg: /dist) where the index.html is located</li> <li>Archive (ZIP) this folder. Ensure index.html is at the root of the archive</li> <li>Rename the ZIP file to have an .webapp extension (eg: my-kiosk.webapp)</li> <li>Login to your Revel Digital account, navigate to Media, and upload the file</li> </ul>"},{"location":"webapps/#getting-started","title":"Getting Started","text":"<p>The Revel Digital GitHub repo contains a number of examples for getting started. These are essentially skeleton projects in various frameworks with the essentials pre-installed including the Player Client Javascript SDK and an example GitHub workflow.</p> <p>We have the following examples available:</p> <ul> <li>Angular</li> <li>React</li> <li>Vue</li> </ul>"},{"location":"webapps/#angular-example-using-github-workflow","title":"Angular Example using Github Workflow","text":""},{"location":"webapps/#step-1-fork-the-angular-example-app","title":"Step 1. Fork the Angular example app","text":"<pre><code>gh repo clone RevelDigital/ng-test-client-sdk\n</code></pre>"},{"location":"webapps/#step-2-install-packages-and-build","title":"Step 2. Install packages and build","text":"<p>To ensure your app builds locally, run the following NPM commands in your project folder. <pre><code>npm i\nnpm run build\n</code></pre></p>"},{"location":"webapps/#step-3-generate-an-api-key","title":"Step 3. Generate an API key","text":"<p>In order to automate the deployment of your Webapp you'll need an API key from your Revel Digital acount. Login to your account and navigate to Account Information &gt; Developer API.</p> <p>Generate a new API key and copy it's value. </p>"},{"location":"webapps/#step-4-add-a-github-secret","title":"Step 4. Add a GitHub Secret","text":"<p>Your API key must be added to your GitHub repo as a secret. The key can then be utilized in a secure fashion by the GitHub Action. Please reference the GitHub documentation on adding a new repository secret</p> <p>The repository secret must be named: <pre><code>REVEL_API_KEY\n</code></pre></p>"},{"location":"webapps/#step-5-build-and-deploy","title":"Step 5. Build and Deploy","text":"<p>With your repository setup, you can now build and deploy your app in one step.</p> <p>Simply commit and push your changes to GitHub. The workflow will automate the process of building and deploying the app to your Revel Digital account.</p>"},{"location":"webapps/#step-6-add-your-webapp-to-a-template","title":"Step 6. Add your Webapp to a template","text":"<p>With your Webapp build and published, you can now assign it to a Web zone in any of your templates. </p>"},{"location":"webapps/#step-7-done","title":"Step 7. Done!","text":"<p>Your Webapp will now deploy to any scheduled devices.</p>"},{"location":"windows/","title":"Revel Digital Player API for Windows","text":""},{"location":"windows/#introduction","title":"Introduction","text":"<p>The Revel Digital Player API provides runtime access to the Revel Digital player software. This capability allows complete freedom to manipulate the signage, while it's playing, to achieve any level of functionality required.</p> <p>The player software is built on the UWP (Universal Windows Platform) and utilizes a Javascript scripting engine for interpretation of user supplied code. Scripts are able to leverage the complete UWP Framework.</p> <p>At the heart of the API is the <code>Controller</code>. The Controller has a reference to the currently active <code>Schedule</code> and <code>Template</code>. Each <code>Template</code> has a list of its Modules which together compose the template content. Each template <code>Module</code> has a reference to the actual UWP control responsible for rendering its content. The UWP control is accessed through the <code>IRevelControl</code> interface and has a number of RevelDigital specific methods and properties. The IRevelControl interface can also be treated as a reference to a UWP Control for performing any UWP specific operations. Similarily the <code>ITemplate</code> interface can be treated as a reference to the UWP Page.</p> <p>As a rule, the classes in this API are representative of definitions for the schedules, templates, modules, etc. That is they should be considered read-only and are purely data bound. Interfaces on the other hand represent the underlying UWP controls. These objects are normally the focus of any scripting since they provide access to the live template objects and directly affect the template visuals.</p>"},{"location":"windows/#example-script","title":"Example script","text":"<p>The following example will fade out an image when a hot spot is clicked. The template looks like this:</p> <p></p> <p>The image is named <code>Static Image 1</code> and the hot spot is named <code>Hot Spot 1</code>. These names are assigned at template design time and are always accessible from script directly by name. Spaces and other special characters in the name are always substituted with an underscore in script.</p> <p>To edit the script for this template, click to open the Menu in the template designer, then click RevelScript Editor. Then enter the following script:</p> <pre><code>Hot_Spot_1.add_Tapped(function() {\n  Static_Image_1.FadeOut();\n});\n</code></pre> <p>In this example an event handler was added for the Tapped event. This in turn called the FadeOut method on the image control.</p>"},{"location":"windows/#snippets","title":"Snippets","text":"<p>The script editor has a number of built-in snippets available for some of the more common scripting tasks. Only zones currently added to the template will be available in the snippet dropdown.</p> <p></p> <p>These snippets will auto generate the script necessary to perform the function selected.</p> <p>Note</p> <p>Make sure your platform is properly selected at the top/right of the script editor window.</p>"},{"location":"windows/#technical-reference","title":"Technical Reference","text":"<p>Please refer to our technical API website for more details on actual controls, events, and methods available.</p> <p>https://reveldigital.github.io/ReveDigital.Player.UWP.Doc/api/index.html</p>"}]}